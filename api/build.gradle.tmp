import org.jetbrains.kotlin.gradle.plugin.KotlinPluginWrapper
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

group = 'co.remotectrl.api'
version = '0.0.1-SNAPSHOT'

//apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

apply plugin: 'kotlin-platform-jvm'
apply plugin: 'org.junit.platform.gradle.plugin'

buildscript {
  ext {
    kotlinVersion = '1.2.51'
    springBootVersion = '2.0.3.RELEASE'
  }
  repositories {
    mavenCentral()
    maven { url "http://dl.bintray.com/jetbrains/spek" }
    maven { url "http://repo.spring.io/plugins-release/" }
  }
  dependencies {
    classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
    classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0'
  }
}

sourceCompatibility = 1.8

compileKotlin {
  kotlinOptions {
    freeCompilerArgs = ["-Xjsr305=strict"]
    jvmTarget = "1.8"
  }
}
compileTestKotlin {
  kotlinOptions {
    freeCompilerArgs = ["-Xjsr305=strict"]
    jvmTarget = "1.8"
  }
}

repositories {
  mavenCentral()
  maven { url "http://dl.bintray.com/jetbrains/spek" }
  maven { url "http://repo.spring.io/plugins-release/" }
}

dependencies {
  compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
  compile "org.jetbrains.kotlin:kotlin-reflect"

  compile 'org.springframework.boot:spring-boot-starter'
  runtime 'org.springframework.boot:spring-boot-devtools'

  compile 'com.typesafe.akka:akka-http_2.12:10.0.9'
  compile 'com.typesafe.akka:akka-http-jackson_2.12:10.0.9'

  testCompile 'org.jetbrains.spek:spek-api:1.1.5'
  testRuntime 'org.jetbrains.spek:spek-junit-platform-engine:1.1.5'
  testCompile "org.amshove.kluent:kluent:1.24"

  testCompile 'org.springframework.boot:spring-boot-starter-test'
  testCompile 'com.typesafe.akka:akka-http-testkit_2.12:10.0.9'
}

jar {
  manifest {}

  // This line of code recursively collects and copies all of a project's files
  // and adds them to the JAR itself. One can extend this task, to skip certain
  // files or particular types at will
  from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}